from shutil import rmtree,copy2

from gamemaker import *
from xmlstuff import XMLParser, XMLWriter, NXMLWriter


def getXmlDict(file):
    xmlDict = XMLParser(file)
    #pprint(xmlDict)
    return xmlDict

def recursiveFileLoading_Impl(child, project, ending, callback):
    """
    Recursively scans a child node to find the names of all items in the tree
    :param child: The element in the tree that acts as a directory
    :param project: the project instance
    :param ending: The file ending of that project file (e.g. ".object.gmx" for object files)
    :return: A list containing the names of all items in the tree
    """
    # Note this function ignores the actual names of the subdirectories which be needed later when the new project is
    # built (Unless we are just going to ignore them and create a folder for each project's files)
    tempStorage = []
    for baby in child["children"]:
        path = project.expandPath(baby["content"]) + ending
        print("Loading: ", path)
        if len(child["children"]) > 0:
            tempStorage.extend(recursiveFileLoading_Impl(baby, project, ending, callback))
        tempStorage.append(callback(path))
    return tempStorage

def recursiveFileLoading(project, dictKey, ending, callback):
    """
    Recursively scans a xml dictionary to find the names of elements in gmx files

    :param project: The project object
    :param dictKey: The key to scan for in the base dictionary (e.g. objects)
    :param ending: The file ending to be appended to the name of each file
    :param callback: This function will be called with the path and the project as arguments and the return value will
    be stored in the final list
    :return: A list of objects generated by running callback for the path of each item in the dictionary
    """
    content = []
    for child in project[dictKey]["children"]:
        configPath = project.expandPath(child["content"]) + ending
        # If the element has children then it has no "useful" content (All whitespace)
        if len(child["children"]) > 0:
            #recursive scan
            print("Found subdir:", child["attributes"][0][1])
            content.extend(recursiveFileLoading_Impl(child, project, ending, callback))
        else:
            print("Loading path:", configPath)
            content.append(callback(configPath))
    return content

def XMLGeneratorCallback(path):
    return getXmlDict(path)


def loadConfigFiles(project):
    """
    Loads the data from the config files into the project
    :param project: The project object
    """
    project.configs = recursiveFileLoading(project, "Configs", ".config.gmx", XMLGeneratorCallback)

def loadObjectFiles(project):
    """
    Loads the data from the object files into the project
    :param project: The project object
    """
    project.objects = recursiveFileLoading(project, "objects", ".object.gmx", XMLGeneratorCallback)

def loadScriptFiles(project):
    """
    Loads the data from the scripts into a list of script objects in the project
    :param project: The project object
    """
    project.scripts = recursiveFileLoading(project, "scripts", "", lambda path: Script(path, project))

def loadRoomFiles(project):
    """
    Loads the data from the room files into the project
    :param project: The project object
    """
    project.rooms = recursiveFileLoading(project, "rooms", ".room.gmx", XMLGeneratorCallback)

def loadSpriteFiles(project):
    """
    Loads sprite data from the sprite files into the project
    :param project: The project object
    """
    project.sprites = recursiveFileLoading(project, "sprites", ".sprite.gmx", XMLGeneratorCallback)

# ##def checkCollision(projects):
#     """
#     Checks through all categories in the checkCases list to see if there are any copies in all projects in the projects list
#     :param projects: A list of project objects
#     """
#     checkCases = ["objectNames","roomNames","scriptNames","spriteNames"]#A list of all the different element types we will be searching for
#     collisionList = [] #A list to notate all naming collisions using "collision at [projectName] [case] [level]
#     passList = []#a list to store all non collisions so all the data can be accessed so it doesnt have to be searched again
#     for case in checkCases:#iterate through all the cases
#         caseAspects = [] #a list of all the different elements by name, specific to the type
#         for project in projects: #iterate through all the projects
#             for level in project.resolutionTable[case]: #go through all elements of the resolution table of the current project using the current case
#                 if level not in caseAspects:#check if the level is the the list of stored elements
#                     caseAspects.append(level)#if not append
#                     passList.append([project.projectName,case,level])
#                 else: #else join the collision to a table to be printed at the end
#                     collisionList.append([project.projectName,case,level])
#     return collisionList,passList

def nameChanger(projects):
    """
    A method to use the names of the collision and then simply rename them using the common structure of the game maker profile
    :param projects: a list of all projects to be compiled
    """
    #NOTE we could elect to rename all files
    for project in projects:
        project.correctMistakes() #changes all objects to turples
def createFolderStructure(projects,startDir):
    """
    A method to generate the folder structure in a new directory, for the final merged project
    Will create subdirectories for each of the projects being merged
    :param projects: a list of all the different gameMakerProject types
    :param startDir: a location for the new merged project to be located
    """
    cases = ["Configs","objects","Output","rooms","script","sprites"]
    print("Making merge directory")
    if os.path.exists(startDir):
        if input("Output directory already exists, remove? (y/n)").lower() == "y":
            print("Removing")
            rmtree(startDir)
            os.makedirs(startDir)
            for case in cases:
                basePath = os.path.abspath(os.path.join(startDir, case))
                for project in projects:
                    projectSubDir = os.path.join(basePath, project.projectName) 
                    print("Making", projectSubDir, "directory")
                    os.makedirs(projectSubDir)
        else:
            print("Aborting")
            exit(0)
            
def renameSpriteImages(projects,baseDir):
    for project in projects: #iterates through all projects
        if not os.path.exists(baseDir +"/sprites/"+project.projectName+"/images/"):
            print("going in path")
            os.makedirs(baseDir +"/sprites/"+project.projectName+"/images/")
        print("working in",project.projectName)
        for sprite in project.renamedFiles["spriteNames"]:
            #sprites could have no collisions or could have collisions the only way to check is against the renamedFiles
            count = 0
            while True:
                try:
                    cp = (baseDir + "/sprites/" + project.projectName + "/images/" + sprite[1] + "_" + str(count) + ".png")
                    src =(project.rootPath + "/sprites/images/"+sprite[1]+"_"+str(count)+".png")
                    copy2(src,cp)
                    count += 1
                except :
                    if count == 0: #if the program wasnt event able to copy one file it means the image isnt in the desired location
                        print("unable to copy",project.rootPath + "/sprites/images/"+sprite[1]+"_"+str(count)+".png This could be that the sprite has no image")
                     #exits out of loop if it cant copy file, as it will have prexisted, what if the file is not not there
                    break
                    print("got here")

def parseProjectData(file):
    """
    Loads the data from the project into a project object and builds
    resolution tables from this data
    :param file: The path to the root diretory in the project
    """
    project = gameMakerProject(file)#Create an instance of the game maker project type using the passed file location as the root
    project.project = getXmlDict(project.expandPath(project.projectName + ".project.gmx")) #concatanate ".project.gmx" using the Expand path function and then parse it using the XML parser from XMLstuff
    print("Loading and parsing config")
    loadConfigFiles(project)#call config load
    print("Loading object files")
    loadObjectFiles(project)
    print("Parsing scripts")
    loadScriptFiles(project)
    print("Loading room data")
    loadRoomFiles(project)
    print("Loading sprite data")
    loadSpriteFiles(project)
    project.buildResolutionTable()
    return project

def getRenameTable(project, key, tagName, pathbase):
    """
    Builds a table of all the names of each object after the rename operation
    :param project:
    :param key:
    :param tagName:
    :return:
    """
    data = []
    for object_ in project.resolutionTable[key]:
        name = object_
        data.append([tagName, os.path.join(pathbase, project.projectName, name[0])])
    return data


def generateNewProjectFiles(project, path):
    """
    Generates all of the XML files required by a project
    :param project: The project to generate files for
    :param path: The path to the new root directory of the project
    """
    newName = os.path.join(path, getTLName(path) + ".project.gmx")
    print("New project name:", newName)

    #TODO: rename
    dict_ = [
        ["Configs", "name=configs", [
            ["Config", "Configs\Default"]
        ]],
        ["NewExtensions", ""],
        ["sounds", "name=sound", ""],
    ]

    spriteData = getRenameTable(project, "spriteNames", "sprite", "sprites")

    dict_.append(["sprites", "name=sprites", spriteData])

    print(dict_)

    for x in project.renamedFiles:
        for y in project.renamedFiles[x]:
            print("X:", y)

    XMLWriter(newName, dict_, "assets")

def spriteWriter(project,path):
    print("TEST")
    xml = project.sprites[0]
    NXMLWriter("Test.xml", xml, "root")
    exit(-1)

    for sprite in project.resolutionTable["spriteNames"]:
        ###parse the xml###
        activeDict = getXmlDict(project.rootPath + "/sprites/" + sprite +".sprite.gmx")
        activeDict["frames"]["children"][0]["content"] = "spr_" + project.projectName + "_" + sprite +"_0.png" #NOTE this will have to use the resolutiontable
        #NOTE convert resolution table to turple
        newFile = path + sprite +".sprite.gmx"
        XMLWriter(newFile,activeDict,"sprite")
        
project1 = parseProjectData("./Examples/Erasmus.gmx")#Start using the file Erasmus in the example
project2 = parseProjectData("./Examples/FireWorldScales.gmx")#throws error as not finding file
projectList = [project1,project2]
#collisionList, passList = checkCollision(projectList)
createFolderStructure([project1,project2],"./Examples/Merge")
nameChanger(projectList)
renameSpriteImages([project1,project2],"./Examples/Merge")
generateNewProjectFiles(project1, "./Examples/Merge")
#spriteWriter(project1,"./")
print("finiš")
input()#hang
